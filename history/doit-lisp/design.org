* Lang
** virtual machine project
*** yac/lex parser
*** compile to c
*** use tcc for dynamic compilation
*** c-runtime
**** ~common.h~   - define core data structures and constants
**** ~reader.c~   - lexer and parser
**** ~compiler.c~ - compile sexprs to c code
**** ~eval.c~     - manage the execution of compiled code
**** ~gc.c~       - basic mark-and-sweep garbage collector
**** ~main.c~     - cli interface for repl, pipes, and shell scripts

* Useful Links
  - [[http://www.tldp.org/HOWTO/Lex-YACC-HOWTO.html#toc3][lex]] info
  - decent recent c99 usage: http://icube-icps.unistra.fr/img_auth.php/d/db/ModernC.pdf
* Discoveries 
** Debugging Segfaults
 Sat Nov 19 15:39:07 EST 2016:

 - to enable core dumps: ~ulimit -c unlimited~

 - to get a backtrace out of a core dump: ~gdb bin.name core; bt~
 http://stackoverflow.com/questions/5745215/getting-stacktrace-from-core-dump
** Dealing with Unicode in modern C
   I need something that will let me read unicode chars from a stream here
   http://unicodebook.readthedocs.io/programming_languages.html
   http://pubs.opengroup.org/onlinepubs/007908775/xsh/wchar.h.html
* Questions
 - why don't I have to do [[http://stackoverflow.com/questions/26930150/process-utf-8-characters-in-c-from-a-text-file][this]]?: ~setlocale(LC_ALL, "");~
  
* Realizations

  http://softwareengineering.stackexchange.com/questions/257868/when-does-it-make-sense-to-compile-my-own-language-to-c-code-first

  - I don't have a coherent strategy for building
    a) a runtime
    b) a self-hosting compiler
  - I'm not enjoying writing c code

  Instead, my path could look like this:

** Build a Runtime

   - write runtime in raw LLVM IR, or generate it in a very high-level language (clojure). 
   - Hand-write/generate a set of tests in IR to verify that the runtime works.

*** Parts of a runtime
    1) Basic data structures: primitive types, lists
    2) Garbage Collector: can allocate/reclaim data structures
    3) Builtin functions to:
       - perform i/o
       - work with data structures
       - represent namespaces and vars (statically)


   1) Static Compilation
      - using antlr/clojure, write a lexer/parser/compiler that generates IR based on
        the ABI defined by the runtime.
      -

...

*I have no fucking idea how to build this compiled language. I need to read more.*




